" for when using elsewhere
set fsync backspace=indent,eol,start updatetime=1500
set encoding=utf-8
set fileencoding=utf-8
set shell=bash
" search candy
set incsearch nohlsearch ignorecase smartcase

" useful shiz
set number relativenumber hidden cursorline nocursorcolumn
set splitright splitbelow laststatus=2
set mouse=a mousefocus clipboard=unnamedplus
set smarttab autoindent copyindent
set scrolloff=4	  " 4 lines of context when scrolling
syntax enable
set history=1000 undolevels=1000
" non-printable and double-width chars
set ambiwidth=single showbreak=↪\ 
set listchars=tab:¦\ ,precedes:←,extends:→,nbsp:‡,trail:·,eol:¬
" default tab->2 spaces, use multiples of 2 when autoindenting
set tabstop=2 shiftwidth=2 shiftround
" wrap shiz
set wrap linebreak nolist
set directory=/tmp   " store swap files here
filetype on
filetype indent plugin on
set ttimeoutlen=10
set noshowmode showcmd
"set colorcolumn=80
highlight ColorColumn ctermbg=240
highlight CursorColumn ctermbg=235

""" VIM-PLUG """

" install vim-plug if it's not already there
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" for vim-markdown-composer
function! BuildComposer(info)
  if a:info.status != 'unchanged' || a:info.force
    if has('nvim')
      !cargo build --release
    else
      !cargo build --release --no-default-features --features json-rpc
    endif
  endif
endfunction

call plug#begin('~/.vim/plugs')
Plug 'lervag/vimtex', {'for':'tex'}
Plug 'xuhdev/vim-latex-live-preview', {'for':'tex'}

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vimwiki/vimwiki'
Plug 'itchyny/calendar.vim'

Plug 'morhetz/gruvbox'
Plug 'altercation/vim-colors-solarized'
Plug 'mhinz/vim-startify'

Plug 'godlygeek/tabular'
Plug 'sjl/gundo.vim'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-commentary'
Plug 'chrisbra/Colorizer'
Plug 'severin-lemaignan/vim-minimap'

Plug 'junegunn/goyo.vim'
Plug 'gabrielelana/vim-markdown', {'for':'markdown'}
Plug 'euclio/vim-markdown-composer', {'do':function('BuildComposer'), 'for':'markdown'}

Plug '4Evergreen4/vim-hardy', {'for':'arduino'}
Plug 'jplaut/vim-arduino-ino', {'for':'arduino'}
""Plug 'airblade/vim-gitgutter'
""Plug 'vim-syntastic/syntastic'
""Plug 'Valloric/YouCompleteMe'
call plug#end()

" Plugin options

let g:livepreview_previewer = 'zathura'

let g:gundo_preview_height = 20
let g:gundo_width = 60
let g:gundo_preview_bottom = 1

let g:startify_list_order = [
        \ ['     ### MRU'],
        \ 'files',
        \ ['     ## Bookmarks'],
        \ 'bookmarks',
        \ ['     ## Sessions'],
        \ 'sessions',
        \ ['     ## Commands'],
        \ 'commands' ]
let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 1
let g:startify_fortune_use_unicode = 1
let g:startify_padding_left = 5

let g:airline_theme = 'angr'
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_detect_spell = 0
let g:airline_detect_modified = 1
let g:airline_detect_paste = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#whitespace#symbol = '!'
let g:airline#extensions#vimtex#enabled = 1
let g:airline#extensions#wordcount#enabled = 0

let g:airline_section_a = airline#section#create(['mode','crypt','paste','spell','iminsert'])
let g:airline_section_b = airline#section#create(['hunks','branch'])
let g:airline_section_c = airline#section#create(['%<','file'])
let g:airline_section_gutter = airline#section#create([' %='])
let g:airline_section_x = airline#section#create(['spell','filetype'])
let g:airline_section_y = ''
let g:airline_section_z = airline#section#create(['|%v  %P'])

let g:promptline_theme = 'airline'
let g:airline_mode_map = {
        \ '__': '-',  'n': 'N',
        \ 'i': 'I',   'R': 'R',
        \ 'c': 'C',   'v': 'V',
        \ 'V': 'VB',  '' : 'V',
        \ 's': 'S',   'S': 'SB', }

let g:netrw_dav_cmd  = 'cadaver'
let g:netrw_file_cmd = 'wget'
let g:netrw_http_cmd = 'elinks'
let g:netrw_ftp_list_cmd = 'ls -lhF'
let g:netrw_ftp_timelist_cmd = 'ls -tlhF'
let g:netrw_ftp_sizelist_cmd = 'ls -slhF'
let g:netrw_browse_split = 1
let g:netrw_hide = 1
let g:netrw_keepdir = 0

" I need to put this in a colorscheme conditional for terminal
"let g:gruvbox_italic=1

""" CONDITIONALS """

" Set solarized on fish
if $SHELL == '/bin/fish'
  set background=light
  colorscheme solarized
  let g:airline_theme = 'solarized'
endif

" Gruvbox on GUI
if has('gui_running')
  let g:gruvbox_italic = 1
  set background=dark
  colorscheme gruvbox
  let g:gruvbox_contrast_dark='soft'
endif


""" TEXT PREFS """

" set cursor shape on libvte-based terminals:
" block in normal mode
" I-beam in insert
" Underline in replace
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

""" KEYBINDS
set whichwrap+=<,>,[,] " after reaching line end, move to next/prev line, except for h and l
map j gj
map k gk
map <Down> gj
map <Up>   gk
map <Home> g^
map <End>  g$

noremap <C-J> <C-W><C-J>
noremap <C-K> <C-W><C-K>
noremap <C-L> <C-W><C-L>
noremap <C-H> <C-W><C-H>

noremap <F3> :set list!<CR>
noremap <silent> <Leader>w :call ToggleWrap()<CR>

if exists(":GundoToggle")
  nnoremap <F2> :GundoToggle<CR>
endif

" Autocommands
"autocmd BufRead,BufNewFile *.md        setlocal spell spelllang=en
autocmd BufRead,BufNewFile *.txt        setlocal spell spelllang=en
autocmd BufRead,BufNewFile *.tex        setlocal spell spelllang=en
autocmd BufRead,BufNewFile *.lyx        set filetype=tex
"autocmd BufRead,BufNewFile *.md        setlocal textwidth=80
"autocmd BufRead,BufNewFile *.txt       setlocal textwidth=80

autocmd! FileType c,cpp                 setlocal shiftwidth=4 softtabstop=4 tabstop=4 makeprg=make
autocmd! FileType python                setlocal shiftwidth=4 softtabstop=4 tabstop=4 makeprg=python\ %
autocmd! FileType sh                    setlocal shiftwidth=2 softtabstop=2 tabstop=2 makeprg=./%
autocmd! FileType tex                   setlocal shiftwidth=4 softtabstop=4 tabstop=4 makeprg=pdflatex\ %
autocmd! BufNewFile,BufRead *.ino,*.pde setlocal filetype=arduino
autocmd! BufNewFile,BufRead PKGBUILD    setlocal shiftwidth=2 softtabstop=2 tabstop=2 makeprg=makepkg


""" FUNCTIONS """


function! ToggleWrap()
  if &wrap
    echo "Wrap OFF"
    setlocal nowrap
    set virtualedit=all
    silent! nunmap <buffer> <Up>
    silent! nunmap <buffer> <Down>
    silent! nunmap <buffer> <Home>
    silent! nunmap <buffer> <End>
    silent! iunmap <buffer> <Up>
    silent! iunmap <buffer> <Down>
    silent! iunmap <buffer> <Home>
    silent! iunmap <buffer> <End>
  else
    echo "Wrap ON"
    setlocal wrap linebreak nolist
    set virtualedit=
    setlocal display+=lastline
    noremap  <buffer> <silent> <Up>   gk
    noremap  <buffer> <silent> <Down> gj
    noremap  <buffer> <silent> <Home> g<Home>
    noremap  <buffer> <silent> <End>  g<End>
    inoremap <buffer> <silent> <Up>   <C-o>gk
    inoremap <buffer> <silent> <Down> <C-o>gj
    inoremap <buffer> <silent> <Home> <C-o>g<Home>
    inoremap <buffer> <silent> <End>  <C-o>g<End>
  endif
endfunction


""" RETIRED """

"let g:powerline_pycmd="py3"
"let $PYTHONPATH='/usr/lib/python3.6/site-packages'
"python from powerline.vim import setup as powerline_setup
"python powerline_setup()
"python del powerline_setup

