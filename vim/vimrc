" for when using elsewhere
set fsync backspace=indent,eol,start updatetime=1500
set shell=bash\ -i
" search candy
set incsearch nohlsearch ignorecase smartcase

" useful shiz
set number hidden cursorline cursorcolumn
set splitright
set mouse=a mousefocus clipboard=unnamedplus
set smarttab autoindent copyindent
set scrolloff=2	  " 2 lines of context when scrolling
syntax enable
set history=1000 undolevels=1000
" non-printable and double-width chars
set list listchars=tab:>-,trail:·,extends:#,nbsp:·
set ambiwidth=single
" tab -> 2 spaces, autoindent when pasting
set expandtab tabstop=2
" default tab->2 spaces, use multiples of 2 when autoindenting
set softtabstop=2 shiftwidth=2 shiftround
" wrap shiz
set wrap linebreak nolist
set directory=~/.vim-tmp,/var/tmp   " store swap files here
filetype on
filetype indent plugin on
set ttimeoutlen=10
set noshowmode
set showcmd
set colorcolumn=80
hi ColorColumn ctermbg=7

""" VIM-PLUG """

" install vim-plug if it's not already there
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" for vim-markdown-composer
function! BuildComposer(info)
  if a:info.status != 'unchanged' || a:info.force
    if has('nvim')
      !cargo build --release
    else
      !cargo build --release --no-default-features --features json-rpc
    endif
  endif
endfunction


call plug#begin('~/.vim/plugs')
Plug 'lervag/vimtex', {'for':'tex'}
Plug 'xuhdev/vim-latex-live-preview', {'for':'tex'}
Plug 'vimwiki/vimwiki'

Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
Plug 'altercation/vim-colors-solarized'
Plug 'mhinz/vim-startify'

Plug 'godlygeek/tabular'
Plug 'sjl/gundo.vim'
Plug 'Raimondi/delimitMate'
Plug 'chrisbra/Colorizer'

Plug 'junegunn/goyo.vim'
Plug 'gabrielelana/vim-markdown', {'for':'markdown'}
Plug 'euclio/vim-markdown-composer', {'do':function('BuildComposer'), 'for':'markdown'}

Plug 'quabug/vim-gdscript', {'for':'godot'}

Plug '4Evergreen4/vim-hardy', {'for':'arduino'}
Plug 'jplaut/vim-arduino-ino', {'for':'arduino'}
"Plug 'airblade/vim-gitgutter'
"Plug 'vim-syntastic/syntastic'
"Plug 'Valloric/YouCompleteMe'
call plug#end()

" Plugin options

let g:livepreview_previewer = 'evince'

let g:gundo_preview_height = 20
let g:gundo_width = 60
let g:gundo_preview_bottom = 1

let g:airline_theme = 'angr'
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
let g:airline#extensions#tabline#enabled = 0
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_highlighting_cache = 1
let g:airline_detect_spell = 0
let g:airline_detect_modified = 1
let g:airline_detect_paste = 1

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#whitespace#symbol = '!'
let g:airline#extensions#vimtex#enabled = 0
let g:airline#extensions#wordcount#enabled = 0

let g:airline_section_a = airline#section#create(['mode','crypt','paste','spell','iminsert'])
let g:airline_section_b = airline#section#create(['hunks','branch'])
let g:airline_section_c = airline#section#create(['%<%f'])
let g:airline_section_gutter = airline#section#create([' %='])
let g:airline_section_x = airline#section#create(['filetype'])
let g:airline_section_y = ''
let g:airline_section_z = airline#section#create(['|%v  %P'])

let g:promptline_theme = 'airline'
let g:airline_mode_map = {
\ '__': '-',
\ 'n': 'N',
\ 'i': 'I',
\ 'R': 'R',
\ 'c': 'C',
\ 'v': 'V',
\ 'V': 'VB',
\ '' : 'V',
\ 's': 'S',
\ 'S': 'SB',
\ }

" I need to put this in a colorscheme conditional for terminal
"let g:gruvbox_italic=1

""" CONDITIONALS """

" Set solarized on fish
if $SHELL == '/bin/fish'
  set background=light
  colorscheme solarized
  let g:airline_theme = 'solarized'
endif

" Gruvbox on GUI
if has('gui_running')
  let g:gruvbox_italic = 1
  set background=dark
  colorscheme gruvbox
  let g:gruvbox_contrast_dark='soft'
endif

""" TEXT PREFS """

" set cursor shape on libvte-based terminals:
" block in normal mode
" I-beam in insert
" Underline in replace
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Sane movement
set whichwrap+=<,>,[,] " after reaching line end, move to next/prev line, except for h and l
map j gj
map k gk
map <Down> gj
map <Up> gk
map <Home> g^
map <End> g$
noremap <silent> <Leader>w :call ToggleWrap()<CR>

if exists(":GundoToggle")
  nnoremap <F2> :GundoToggle<CR>
endif

" Autocommands
autocmd BufRead,BufNewFile *.md  setlocal spell spelllang=en
autocmd BufRead,BufNewFile *.txt setlocal spell spelllang=en
autocmd BufRead,BufNewFile *.tex setlocal spell spelllang=en
autocmd BufRead,BufNewFile *.lyx set filetype=tex
"autocmd BufRead,BufNewFile *.md setlocal textwidth=80
"autocmd BufRead,BufNewFile *.txt setlocal textwidth=80

autocmd! FileType python set shiftwidth=4 softtabstop=4 tabstop=4 makeprg=python\ %
autocmd! BufRead,BufNewFile *.ino,*.pde setlocal filetype=arduino
autocmd! FileType tex set shiftwidth=4 softtabstop=4 tabstop=4 makeprg=pdflatex\ %
autocmd! FileType c,cpp set shiftwidth=4 softtabstop=4 tabstop=4 makeprg=make
autocmd! FileType sh set shiftwidth=2 softtabstop=2 tabstop=2 makeprg=./%
autocmd! BufNewFile,BufRead PKGBUILD set shiftwidth=2 softtabstop=2 tabstop=2 makeprg=makepkg


""" FUNCTIONS """


function! ToggleWrap()
  if &wrap
    echo "Wrap OFF"
    setlocal nowrap
    set virtualedit=all
    silent! nunmap <buffer> <Up>
    silent! nunmap <buffer> <Down>
    silent! nunmap <buffer> <Home>
    silent! nunmap <buffer> <End>
    silent! iunmap <buffer> <Up>
    silent! iunmap <buffer> <Down>
    silent! iunmap <buffer> <Home>
    silent! iunmap <buffer> <End>
  else
    echo "Wrap ON"
    setlocal wrap linebreak nolist
    set virtualedit=
    setlocal display+=lastline
    noremap  <buffer> <silent> <Up>   gk
    noremap  <buffer> <silent> <Down> gj
    noremap  <buffer> <silent> <Home> g<Home>
    noremap  <buffer> <silent> <End>  g<End>
    inoremap <buffer> <silent> <Up>   <C-o>gk
    inoremap <buffer> <silent> <Down> <C-o>gj
    inoremap <buffer> <silent> <Home> <C-o>g<Home>
    inoremap <buffer> <silent> <End>  <C-o>g<End>
  endif
endfunction

