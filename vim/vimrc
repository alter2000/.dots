" for when using elsewhere
set fsync backspace=indent,eol,start updatetime=290
set encoding=utf-8 fileencoding=utf-8
set shell=zsh
" search candy
set incsearch nohlsearch ignorecase smartcase

" useful shiz
set number relativenumber nocursorline nocursorcolumn
set splitright splitbelow laststatus=2
set mouse=a mousefocus clipboard=unnamedplus
set smarttab autoindent copyindent
set scrolloff=4	  " 4 lines of context when scrolling
syntax enable
set history=1000 undolevels=1000 updatecount=100
set autoread nospell
" non-printable and double-width chars
set ambiwidth=single showbreak=↪\ 
set listchars=tab:¦\ ,precedes:←,extends:→,nbsp:‡,trail:·,eol:¬
" default tab->2 spaces, use multiples of 2 when autoindenting
set tabstop=2 shiftwidth=2 shiftround
" wrap shiz
set wrap linebreak nolist
set directory=/tmp   " store swap files here
filetype on
filetype indent plugin on
set ttimeoutlen=10
set noshowmode showcmd noerrorbells visualbell
"set colorcolumn=80
highlight ColorColumn ctermbg=240
highlight CursorColumn ctermbg=235

" gvim options
set guioptions='PAciMg'  " remove cruft
set guifont="Knack 13,Hasklig 13"
set guipty


""" VIM-PLUG """

" install vim-plug if it's not already there
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

function! BuildComposer(info)
  if a:info.status != 'unchanged' || a:info.force
    if has('nvim')
      !cargo build --release
    else
      !cargo build --release --no-default-features --features json-rpc
    endif
  endif
endfunction

call plug#begin('~/.vim/plugs')
Plug 'jamessan/vim-gnupg'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'dhruvasagar/vim-table-mode'
Plug 'tpope/vim-vinegar'
"Plug 'xolox/vim-notes'

Plug 'morhetz/gruvbox'
Plug 'therubymug/vim-pyte'
Plug 'mhinz/vim-startify'

"Plug 'vim-syntastic/syntastic'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'Valloric/YouCompleteMe', {'do': './install.py --clang-completer --system-libclang --racer-completer'}
Plug 'junegunn/goyo.vim'

Plug 'lervag/vimtex'
"Plug 'xuhdev/vim-latex-live-preview'

Plug 'chrisbra/colorizer'
Plug 'Raimondi/delimitMate'
"Plug 'majutsushi/tagbar'
Plug 'tpope/vim-surround'
Plug 'sjl/gundo.vim'
Plug 'godlygeek/tabular'
"Plug 'tpope/vim-commentary'
Plug 'severin-lemaignan/vim-minimap'

Plug 'johngrib/vim-game-snake'

call plug#end()


" Plugin options

let g:livepreview_previewer = 'zathura'
let g:pandoc#folding#mode = 'relative'

let g:gundo_preview_height = 10
let g:gundo_width = 23
let g:gundo_preview_bottom = 1

let g:startify_list_order = [
        \ ['     ### MRU'],      'files',
        \ ['     ## Bookmarks'], 'bookmarks',
        \ ['     ## Sessions'],  'sessions',
        \ ['     ## Commands'],  'commands' ]
let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 1
let g:startify_fortune_use_unicode = 1
let g:startify_padding_left = 5

let g:airline_theme = 'gruvbox'
let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_detect_spell = 0
let g:airline_detect_modified = 1
let g:airline_detect_paste = 1
let g:airline#extensions#tmuxline#enabled = 0
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#whitespace#symbol = '!'
let g:airline#extensions#vimtex#enabled = 1
let g:airline#extensions#wordcount#enabled = 0
let g:airline_section_a = airline#section#create(['mode','crypt','paste','spell','iminsert'])
let g:airline_section_b = airline#section#create(['hunks','branch'])
let g:airline_section_c = airline#section#create(['%<','file'])
let g:airline_section_gutter = airline#section#create([' %='])
let g:airline_section_x = airline#section#create(['spell','filetype'])
let g:airline_section_y = ''
let g:airline_section_z = airline#section#create(['|%v  %P'])
let g:promptline_theme = 'airline'
let g:airline_mode_map = {
        \ '__': '-',  'n': 'N',
        \ 'i': 'I',   'R': 'R',
        \ 'c': 'C',   'v': 'V',
        \ 'V': 'VB',  '' : 'V',
        \ 's': 'S',   'S': 'SB', }

let g:netrw_dav_cmd  = 'cadaver'
let g:netrw_file_cmd = 'wget'
let g:netrw_http_cmd = 'elinks'
let g:netrw_ftp_list_cmd = 'ls -lhF'
let g:netrw_ftp_timelist_cmd = 'ls -tlhF'
let g:netrw_ftp_sizelist_cmd = 'ls -slhF'
let g:netrw_browse_split = 1
let g:netrw_hide = 1
let g:netrw_keepdir = 0

let g:vimtex_view_use_temp_files = 1
let g:vimtex_view_forward_search_on_start = 1
let g:vimtex_view_zathura_options = 'set recolor=false'

let g:delimitMate_nesting_quotes = ['"','`']

" I need to put this in a colorscheme conditional for terminal
let g:gruvbox_italic=1
let g:gruvbox_guisp_fallback='fg'
let g:gruvbox_termcolors=256

""" CONDITIONALS """

" Set gruvbox on fish
if $SHELL == '/bin/fish'
  set background=light
  let g:airline_theme = 'gruvbox'
endif

" Gruvbox on GUI
if has('gui_running')
  let g:gruvbox_italic = 1
  set background=dark
  colorscheme gruvbox
  let g:gruvbox_contrast_dark='oft'
endif


""" TEXT PREFS """

" set cursor shape on libvte-based terminals:
" block in normal mode
" I-beam in insert
" Underline in replace
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

""" KEYBINDS """
"paste with proper indentation
nnoremap p ]p
nnoremap : ;
nnoremap ; :
set whichwrap+=<,>,[,] " after reaching line end, move to next/prev line, except for h and l
map j gj
map k gk
map <Down> gj
map <Up>   gk
map <Home> g^
map <End>  g$
" tmux was weird escape codes
vnoremap [1;5C w
vnoremap [1;5D b
nnoremap [1;5C w
nnoremap [1;5D b

noremap <C-J> <C-W><C-J>
noremap <C-K> <C-W><C-K>
noremap <C-L> <C-W><C-L>
noremap <C-H> <C-W><C-H>

nnoremap <F2>  :GundoToggle<CR>
nnoremap <F3>  :set list!<CR>
nnoremap <F4>  :MinimapToggle<CR>
nnoremap <F10> :ColorHighlight<CR>
nnoremap <silent> <Leader>w :call ToggleWrap()<CR>
cnoremap W w !sudo tee > /dev/null %

" Autocommands
autocmd BufRead,BufNewFile *.txt setlocal spell spelllang=en
autocmd BufRead,BufNewFile *.lyx set filetype=tex
"autocmd BufRead,BufNewFile *.txt setlocal textwidth=80

autocmd FileType *.ino,*.pde set filetype=arduino
autocmd FileType PKGBUILD    setlocal shiftwidth=2 softtabstop=2 tabstop=2 makeprg=makepkg

autocmd FileType python setlocal shiftwidth=4 softtabstop=4 tabstop=4 textwidth=79 expandtab autoindent makeprg=python\ %
autocmd FileType sh     setlocal shiftwidth=2 softtabstop=2 tabstop=2 makeprg=./%

autocmd FileType *mail setlocal nospell
autocmd FileType mail let b:loaded_delimitMate = 1

""" FUNCTIONS """


function! ToggleWrap()
  if &wrap
    echo "Wrap OFF"
    setlocal nowrap
    set virtualedit=all
    silent! nunmap <buffer> <Up>
    silent! nunmap <buffer> <Down>
    silent! nunmap <buffer> <Home>
    silent! nunmap <buffer> <End>
    silent! iunmap <buffer> <Up>
    silent! iunmap <buffer> <Down>
    silent! iunmap <buffer> <Home>
    silent! iunmap <buffer> <End>
  else
    echo "Wrap ON"
    setlocal wrap linebreak nolist
    set virtualedit=
    setlocal display+=lastline
    noremap  <buffer> <silent> <Up>   gk
    noremap  <buffer> <silent> <Down> gj
    noremap  <buffer> <silent> <Home> g<Home>
    noremap  <buffer> <silent> <End>  g<End>
    inoremap <buffer> <silent> <Up>   <C-o>gk
    inoremap <buffer> <silent> <Down> <C-o>gj
    inoremap <buffer> <silent> <Home> <C-o>g<Home>
    inoremap <buffer> <silent> <End>  <C-o>g<End>
  endif
endfunction

